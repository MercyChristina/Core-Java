
//Find the percentage and the count of each case status on total applications for each year. Create a graph depicting the pattern of All the cases over the period of time.
	
//jar:perjar
inputfile:h11.txt



import java.io.*;
import java.util.TreeMap;

import org.apache.hadoop.io.*;
//import org.apache.hadoop.mapred.MRCaching.ReduceClass;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;

import org.apache.hadoop.fs.*;

import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

import org.apache.hadoop.util.*;


public class q6 extends Configured implements Tool
{
   //Map class
   
   public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
   {
      public void map(LongWritable key, Text value, Context context)
      {
         try
         {
            String[] str = value.toString().split(",");
       
            String ecs= str[1];
            String eyear= str[7];
       
            String ss=ecs+','+eyear;
               
            context.write(new Text(ecs),new Text(ss));
              
         }
         catch(Exception e)
         {
            System.out.println(e.getMessage());
         }
      }
   }
  
 
   //Reducer class
   
   public static class ReduceClass extends Reducer<Text,Text,NullWritable,Text>
   {
  
       //private TreeMap<Long,Text> repToRecordMap = new TreeMap<Long,Text>();
   

      public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
      {
          long count=0;
          String val="";
          String cnt="";
          String rec="";
          String Per="";
                 
         String cs=key.toString();
             
        /*  String[] str = values.toString().split(",");
          String t="";
            String y= str[1];                // year
        */
         
         double totalcount=3000;
         double per;
         
           
            for(Text v:values)
            {   
                count++;
                rec=v.toString();  // rec contains case status and year
            }
           
             //String[] str = rec.toString().split(",");
             //String cs=str[0];    // case status
            per=(count*100)/totalcount;
            Per= String.format("%f", per);
             cnt= String.format("%d", count);
             val =  rec + ',' + cnt+','+Per;   
            
           
             context.write(NullWritable.get(),new Text(val));
           
      }          
    }
 
  
   //Partitioner class
   
   public static class CaderPartitioner extends
   Partitioner < Text, Text >
   {
      @Override
      public int getPartition(Text key, Text value, int numReduceTasks)
      {
         String[] str = value.toString().split(",");
       String eyear=str[1];
         if(eyear.equals("2014"))
         {
            return 0;
         }
         else
         {
            return 1 ;
         }
       
          
      }
     
   }
  
  
   public int run(String[] arg) throws Exception
   {
   
      
      Configuration conf = new Configuration();
      Job job = Job.getInstance(conf);
      job.setJarByClass(q6.class);
      job.setJobName("State Wise Item Qty sales");
      FileInputFormat.setInputPaths(job, new Path(arg[0]));
      FileOutputFormat.setOutputPath(job,new Path(arg[1]));
       
      job.setMapperClass(MapClass.class);
       
      job.setMapOutputKeyClass(Text.class);
      job.setMapOutputValueClass(Text.class);
     
      //set partitioner statement
       
      job.setPartitionerClass(CaderPartitioner.class);
      job.setReducerClass(ReduceClass.class);
      job.setNumReduceTasks(4);
      job.setInputFormatClass(TextInputFormat.class);
       
      job.setOutputFormatClass(TextOutputFormat.class);
     
      job.setOutputKeyClass(NullWritable.class);
      job.setOutputValueClass(Text.class);
       
      System.exit(job.waitForCompletion(true)? 0 : 1);
      return 0;
   }
  
   public static void main(String ar[]) throws Exception
   {
      ToolRunner.run(new Configuration(), new q6(),ar);
      System.exit(0);
   }
}






CERTIFIED,2014,2,0.066667
WITHDRAWN,2014,2,0.066667
CERTIFIED,2011,8,0.266667
WITHDRAWN,2011,5,0.166667
WITHDRWAN,59800,2,0.066667
