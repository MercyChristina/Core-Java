import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class drt 
{
	public static class driverMapper extends Mapper<Object, Text, Text, Text> 
	{
    public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
    {
	String record = value.toString();
	String[] parts = record.split(",");
	context.write(new Text(parts[0]), new Text("drivers\t" + parts[1]));
    }
    }

public static class timeMapper extends Mapper<Object, Text, Text, Text> 
{
public void map(Object key, Text value, Context context)
		throws IOException, InterruptedException 
{
	String record = value.toString();
	String[] parts = record.split(",");
	context.write(new Text(parts[0]), new Text("times\t" + parts[2]));
}
}

public static class ReduceJoinDriver extends
	Reducer<Text, Text, Text, Text> {
public void reduce(Text key, Iterable<Text> values, Context context)
		throws IOException, InterruptedException {
	String name = "";
	//String id="";
	//double total = 0.0;
	//int count = 0;
	int hrs=0;
	int h=0;
	for (Text t : values) 
	{
		String parts[] = t.toString().split("\t");
		if (parts[0].equals("drivers"))
		{ name=parts[1];
		  
		}
		
		else if(parts[0].equals("times"))
		{
			h=Integer.parseInt(parts[1]);
			if(h>60)
			{
		//	count++;
			hrs =h;
			
		
			}
		}	
	}
	
	
	
	String str = String.format("%s\t%d", name, hrs);
	context.write(new Text(key), new Text(str));
}
}

public static void main(String[] args) throws Exception {

Configuration conf = new Configuration();
Job job = Job.getInstance(conf);
job.setJarByClass(drt.class);
job.setJobName("Reduce Side Join");
job.setReducerClass(ReduceJoinDriver.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(Text.class);
job.setNumReduceTasks(2);

MultipleInputs.addInputPath(job, new Path(args[0]),TextInputFormat.class, driverMapper.class);
MultipleInputs.addInputPath(job, new Path(args[1]),TextInputFormat.class, timeMapper.class);

Path outputPath = new Path(args[2]);
FileOutputFormat.setOutputPath(job, outputPath);
//outputPath.getFileSystem(conf).delete(outputPath);

System.exit(job.waitForCompletion(true) ? 0 : 1);
}
}

